<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\purl\Entity\Provider;
use Drupal\node\NodeTypeInterface;
function purl_form_menu_edit_form_alter(&$form, $form_state) {
  $providers = Provider::loadMultiple();

  $options = [NULL => '-- None --'];

  foreach ($providers as $provider) {
    $modifiers = [];
    foreach ($provider->getProviderPlugin()->getModifierData() as $modifier => $value) {
      $modifiers[$provider->id() . ':' . $modifier] = $modifier;
    }
    $options[$provider->getLabel()] = $modifiers;
  }

  $form['purl'] = [
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => 'Persistent URLs',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  ];

  $form['purl']['purl_provider'] = [
    '#type' => 'select',
    '#title' => 'PURL provider',
    '#value' => NULL,
    '#options' => $options,
  ];
}
function purl_form_menu_link_content_menu_link_content_form_alter(&$form, FormStateInterface $form_state) {

  $providers = Provider::loadMultiple();

  $menuLinkEntity = $form_state->getBuildInfo()['callback_object']->getEntity();

  $selected = NULL;

  if (isset($menuLinkEntity->purl_strip_context[0]) && $menuLinkEntity->purl_strip_context[0]->getValue()['value'] == 1) {
    $selected = '__STRIP__';
  }
  elseif (isset($menuLinkEntity->purl_modifier[0]) && isset($menuLinkEntity->purl_provider[0])) {
    $selected = sprintf(
      '%s:%s',
      $menuLinkEntity->purl_provider[0]->getValue()['target_id'],
      $menuLinkEntity->purl_modifier[0]->getValue()['value']
      );
  }

  $options = [NULL => '-- Maintain context --', '__STRIP__' => 'Strip PURL context'];

  foreach ($providers as $provider) {
    $modifiers = [];
    foreach ($provider->getProviderPlugin()->getModifierData() as $modifier => $value) {
      $modifiers[$provider->id() . ':' . $modifier] = $modifier;
    }
    $options[$provider->getLabel()] = $modifiers;
  }

  $form['purl'] = [
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => 'Persistent URLs',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  ];

  $form['purl']['purl_modifier'] = [
    '#type' => 'select',
    '#title' => 'PURL modifier',
    '#options' => $options,
    '#default_value' => $selected,
  ];
  $form['#entity_builders'][] = 'purl_form_menu_link_content_menu_link_content_form_builder';
}
function purl_form_menu_link_content_menu_link_content_form_builder($entity_type, $type, &$form, FormStateInterface $form_state) {

  $menuLinkEntity = $form_state->getBuildInfo()['callback_object']->getEntity();

  if ($form_state->getValue('purl') && $form_state->getValue('purl')['purl_modifier']) {
    $purlSpec = $form_state->getValue('purl')['purl_modifier'];
    $tokens = explode(':', $purlSpec);
    // Must be `__STRIP__`.
    if (count($tokens) == 1) {
      $provider = NULL;
      $modifier = NULL;
      $menuLinkEntity->set('purl_strip_context', TRUE);
      $form_state->getValue('link')[0]['options'] = ['purl_context' => FALSE];
    }
    else {
      $providerKey = array_shift($tokens);
      $modifier = implode(':', $tokens);
      $provider = Provider::load($providerKey);
      $menuLinkEntity->set('purl_strip_context', FALSE);
      $form_state->getValue('link')[0]['options'] = [
        'purl_context' => ['provider' => $providerKey, 'modifier' => $modifier],
      ];
    }
    $menuLinkEntity->set('purl_provider', $provider);
    $menuLinkEntity->set('purl_modifier', $modifier);
  }
  else {
    $menuLinkEntity->set('purl_strip_context', FALSE);
    $menuLinkEntity->set('purl_modifier', NULL);
    $menuLinkEntity->set('purl_provider', NULL);
  }
}


function purl_form_alter(&$form, $form_state) {
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function purl_form_node_type_form_alter(&$form, $form_state) {
  /* @var Drupal\node\NodeInterface $node */
  $node_type = $form_state->getFormObject()->getEntity();

  $form['purl'] = [
    '#type' => 'details',
    '#title' => t('PURL settings'),
    '#group' => 'additional_settings',
  ];
  $form['purl']['keep_context'] = [
    '#type' => 'checkbox',
    '#title' => t('Keep context of the node.'),
    '#default_value' => $node_type->getThirdPartySetting('purl', 'keep_context', 0),
    '#description' => t('This allows a node-type PURL context.'),
  ];

  $form['#entity_builders'][] = 'purl_form_node_type_form_builder';
}

/**
 * Entity form builder for the node type form to map some values to third party
 * settings.
 */
function purl_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, $form_state) {
  if ($form_state->getValue('keep_context') == 1) {
    $type->setThirdPartySetting('purl', 'keep_context', $form_state->getValue('keep_context'));
    return;
  }

  $type->unsetThirdPartySetting('purl', 'keep_context');
}

/**
 * Implements hook_preprocess_html().
 */
function purl_preprocess_html(&$vars) {
  $init = \Drupal::requestStack();
  $request = $init->getCurrentRequest();
  $modifiers = $request->attributes->get('purl.matched_modifiers', []);

  foreach ($modifiers as $modifier) {
    foreach ($modifier as $key => $item) {
      if (!is_object($item)) {
        $vars['attributes']['class'][] = 'purl-' . $key . '-' . $item;
      }
    }
  }
}
